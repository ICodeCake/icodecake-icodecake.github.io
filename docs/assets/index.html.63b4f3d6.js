import{_ as n,o as e,c as t,f as i}from"./app.d8de21cf.js";const o={};function a(s,r){return e(),t("div",null,[i(` # C#\u3001DotNet\u4E2D\u5E38\u89C1\u7684\u6027\u80FD\u4F18\u5316\u70B9

## Benchmark\u548C\u6E90\u7801\u67E5\u8BE2
*Know What Things Cost.* \uFF08\u4E86\u89E3\u4E8B\u60C5\u7684\u6210\u672C\uFF09

\u7F16\u5199\u4EE3\u7801\u65F6\u5019\u8981\u4FDD\u6301\u597D\u5947\u5FC3\uFF0C\u4E86\u89E3\u5E38\u89C1\u5E95\u5C42\u65B9\u6CD5\u548C\u7C7B\u7684\u5B9E\u73B0\u539F\u7406\u3002\u65E2\u53EF\u4EE5[\u5B66\u4E60\u4ED6\u4EBA\u7F16\u7A0B\u7684\u6280\u5DE7](https://www.stevejgordon.co.uk/become-a-better-developer-by-reading-source-code)\uFF0C\u4E5F\u53EF\u4EE5\u66F4\u597D\u7684\u51B3\u5B9A\u5982\u4F55\u5B9E\u73B0\u529F\u80FD\u3002
\u6BD4\u5982\uFF1A\u4E0B\u9762\u662F\`List<T>.Insert\`\u7684\u4EE3\u7801\u3002\u53EF\u4EE5\u770B\u51FAinsert\u5E76\u4E0D\u662F\u4E00\u4E2A\u5F88\u9AD8\u6548\u7684\u5B9E\u73B0\uFF0C\u5728\u5B9E\u73B0\u529F\u80FD\u7684\u65F6\u5019\u5E94\u8BE5\u5C3D\u91CF\u907F\u514D\u3002
 \`\`\` csharp
        public void Insert(int index, T item) {
            //\u5982\u679C\u8D85\u51FACapacity\uFF0CList\u5185\u90E8\u7684_items Array\u4F1AResize
            if (_size == _items.Length) EnsureCapacity(_size + 1); 
            if (index < _size) {
                //\u4F1A\u628A\u63D2\u5165\u7D22\u5F15\u540E\u7684\u6240\u6709\u503C\u5411\u524DCopy\u4E00\u904D
                Array.Copy(_items, index, _items, index + 1, _size - index);
            }
            _items[index] = item;
            _size++;            
        }
\`\`\`

Benchmark\u4F5C\u4E3A\u6D4B\u8BD5\u6027\u80FD\u7684\u5DE5\u5177\uFF0C\u4E5F\u53EF\u4EE5\u8BA9\u6211\u4EEC\u5BF9\u4E0D\u540C\u5B9E\u73B0\u65B9\u6CD5\u5728\u4E0D\u540C\u60C5\u51B5\u4E0B\u8FDB\u884C\u6BD4\u8F83\uFF0C\u66F4\u597D\u7684\u4F18\u5316\u4EE3\u7801\u3002

> <strong style="color:green;">\u63D0\u793A</strong>
> - \u4E0D\u8981**assume**\uFF0C\u800C\u662F**measure**\u3002\u719F\u77E5\u6240\u6709\u5E95\u5C42\u57FA\u7840\u64CD\u4F5C\u7684\u6210\u672C\u3002(for  foreach; list  array; dictionnary  find; switch  if;)
> - \u5E76\u4E0D\u662F\u6240\u6709\u4EE3\u7801\u90FD\u9700\u8981Benchmark\u6216\u8005\u4F18\u5316\uFF0C\u4E3B\u8981\u662F**Hot Path**\u5173\u952E\u8DEF\u5F84\u4E2D\u7684\u65B9\u6CD5\u3002
> - Benchmark\u5C3D\u91CF\u6A21\u62DF\u9879\u76EE\u4E2D\u4F7F\u7528\u6848\u4F8B\u3002
> - \u91C7\u7528\`[Params(length1,length2)]\`\u53EF\u4EE5\u540C\u65F6\u6A21\u62DF\u4E0D\u540C\u6570\u636E\u91CF\u7684\u60C5\u51B5\uFF0C\u6CE8\u610F[\u7B97\u6CD5\u590D\u6742\u5EA6](https://baike.baidu.com/item/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6/210801?fr=aladdin)\uFF08\u65F6\u95F4\u548C\u7A7A\u95F4\uFF09O(f(N))

## Allocation\u51CF\u5C11\u6CA1\u5FC5\u8981\u7684\u5185\u5B58\u5206\u914D
*The rule of thumb is to have objects de-allocated as fast as possible or not at all.*
\uFF08\u7ECF\u9A8C\u6CD5\u5219\u662F\u5C3D\u53EF\u80FD\u5FEB\u5730\u56DE\u6536\u5BF9\u8C61\uFF0C\u6216\u8005\u6839\u672C\u4E0D\u56DE\u6536\uFF09

\u5728 .NET \u5E94\u7528\u7A0B\u5E8F\u4E2D\uFF0C\u5185\u5B58\u548C\u6027\u80FD\u975E\u5E38\u76F8\u5173\u3002\u5185\u5B58\u7BA1\u7406\u4E0D\u5F53\u4F1A\u5728\u8BB8\u591A\u65B9\u9762\u5F71\u54CD\u6027\u80FD\u3002\u4E00\u79CD\u6548\u5E94\u79F0\u4E3A GC \u538B\u529B\u6216\u5185\u5B58\u538B\u529B\u3002

GC \u538B\u529B\uFF08\u5783\u573E\u56DE\u6536\u5668\u538B\u529B\uFF09\u662F GC \u8DDF\u4E0D\u4E0A\u5185\u5B58\u5904\u7406\u65F6\u7684\u538B\u529B\u3002\u5F53 GC \u53D7\u5230\u538B\u529B\u65F6\uFF0C\u5B83\u5C06\u82B1\u8D39\u66F4\u591A\u65F6\u95F4\u8FDB\u884C\u5783\u573E\u6536\u96C6\uFF0C\u5E76\u4E14\u8FD9\u4E9B\u6536\u96C6\u5C06\u66F4\u9891\u7E41\u5730\u51FA\u73B0\u3002\u5F53\u7A0B\u5E8F\u82B1\u8D39\u66F4\u591A\u65F6\u95F4\u8FDB\u884C\u5783\u573E\u6536\u96C6\u65F6\uFF0C\u5B83\u6267\u884C\u4EE3\u7801\u7684\u65F6\u95F4\u4F1A\u66F4\u5C11\uFF0C\u4ECE\u800C\u76F4\u63A5\u635F\u5BB3\u6027\u80FD\u3002

### \u5E38\u89C1\u7684\u4F18\u5316\u70B9\uFF1A
- \u2714**\u8003\u8651**  \u4F7F\u7528ArraySegment\u3001ArrayPool\u6216\u8005Span\u5BF9\u6570\u7EC4\u5206\u6BB5\u5904\u7406
- \u2714**\u8003\u8651**  \u4F7F\u7528SpanView\u5BF9\u6587\u4EF6\u8FDB\u884C\u8BFB\u5199
- **\u63A8\u8350** List\u3001Collection\u3001Dictionary\u7B49\u5DF2\u77E5\u957F\u5EA6\u65F6\u5019\uFF0C\u65B0\u5EFA\u5E94\u8BE5\u8BBE\u7F6E\u521D\u59CBCapacity
- \u2714**\u8003\u8651** \u5F53string\u5408\u5E76\u5927\u4E8E10\u4E2A\u65F6\u5019\uFF0C\u5E94\u8BE5\u662F\u7528\`StringBuilder\`\uFF0Cstring\u590D\u6742\u64CD\u4F5C\u65F6\u5019\u4F7F\u7528\`Span\`
- [\u4E86\u89E3\u66F4\u591A](https://devblogs.microsoft.com/pfxteam/know-thine-implicit-allocations/)

## MemoryLeak\u5185\u5B58\u6CC4\u6F0F

\u5185\u5B58\u6CC4\u6F0F\u6709\u4E24\u4E2A\u76F8\u5173\u7684\u6838\u5FC3\u539F\u56E0\u3002\u7B2C\u4E00\u4E2A\u6838\u5FC3\u539F\u56E0\u662F\uFF0C\u5F53\u5BF9\u8C61\u4ECD\u7136\u88AB\u5F15\u7528\uFF0C\u4F46\u5B9E\u9645\u4E0A\u672A\u4F7F\u7528\u3002\u7531\u4E8E\u5B83\u4EEC\u88AB\u5F15\u7528\uFF0CGC \u4E0D\u4F1A\u6536\u96C6\u5B83\u4EEC\uFF0C\u5B83\u4EEC\u5C06\u6C38\u4E45\u4FDD\u7559\uFF0C\u5360\u7528\u5185\u5B58\u3002\u4F8B\u5982\uFF0C\u5F53\u60A8\u6CE8\u518C\u5230\u4E8B\u4EF6\u4F46\u6C38\u8FDC\u4E0D\u4F1A\u53D6\u6D88\u6CE8\u518C\u65F6\uFF0C\u53EF\u80FD\u4F1A\u53D1\u751F\u8FD9\u79CD\u60C5\u51B5\u3002\u8BA9\u6211\u4EEC\u79F0\u4E4B\u4E3A\u6258\u7BA1\u5185\u5B58\u6CC4\u6F0F\u3002

\u7B2C\u4E8C\u4E2A\u539F\u56E0\u662F\uFF0C\u5F53\u60A8\u4EE5\u67D0\u79CD\u65B9\u5F0F\u5206\u914D\u975E\u6258\u7BA1\u5185\u5B58\uFF08\u4E0D\u8FDB\u884C\u5783\u573E\u56DE\u6536\uFF09\u5E76\u4E14\u4E0D\u91CA\u653E\u5B83\u65F6\u3002\u8FD9\u5E76\u4E0D\u96BE\u505A\u5230\u3002.NET \u672C\u8EAB\u6709\u8BB8\u591A\u7C7B\u5206\u914D\u975E\u6258\u7BA1\u5185\u5B58\u3002\u51E0\u4E4E\u4EFB\u4F55\u6D89\u53CA\u6D41\u3001\u56FE\u5F62\u3001\u6587\u4EF6\u7CFB\u7EDF\u6216\u7F51\u7EDC\u8C03\u7528\u7684\u4E1C\u897F\u90FD\u8FD9\u6837\u505A\u3002\u901A\u5E38\uFF0C\u8FD9\u4E9B\u7C7B\u5B9E\u73B0\`Dispose\`\u65B9\u6CD5\uFF0C\u8BE5\u65B9\u6CD5\u91CA\u653E\u5185\u5B58\u3002\u60A8\u53EF\u4EE5\u4F7F\u7528\u7279\u6B8A\u7684 .NET \u7C7B\uFF08\u5982\`Marshal\`\uFF09\u6216\u4F7F\u7528 \`PInvoke\` \u8F7B\u677E\u5206\u914D\u975E\u6258\u7BA1\u5185\u5B58\u3002

### \u5E38\u89C1\u539F\u56E0\uFF1A
- \u4E8B\u4EF6\u6CA1\u6709\u6CE8\u9500**\u76D1\u542C**
- \u274C**\u533F\u540D\u51FD\u6570**\uFF0C\u4F1A\u589E\u52A0\u5185\u90E8\u8C03\u7528\u7684\u53D8\u91CF\u6240\u5728Class\u7684\u5F15\u7528\uFF0C\u4F5C\u4E3ATimer\u4E8B\u4EF6Handle\u65F6\u5019\u6216\u8005\u5728Task\u4E2D\u957F\u671F\u8FD0\u884C\u65F6\u4F1A\u51FA\u73B0\u5185\u5B58\u6CC4\u6F0F\u3002
- Static**\u9759\u6001\u53D8\u91CF**\u6216\u8005**\u5168\u5C40\u5355\u4F8B**\u7684\u53D8\u91CF\u4E2D\u5F15\u7528\u7684\u7C7B
- **Dispose**\u6CA1\u6709\u8C03\u7528\uFF0C\u6216\u8005Dispose\u4E2D\u6CA1\u6709\u91CA\u653E\u6240\u6709\u4E8B\u4EF6\u76D1\u542C\u548C\u5176\u4ED6\u7EE7\u627FDispose\u7684\u53D8\u91CF\uFF08\u5982Bitmap\uFF09
- [\u4E86\u89E3\u66F4\u591A](https://michaelscodingspot.com/ways-to-cause-memory-leaks-in-dotnet/)

## C#\u5E38\u89C1\u6027\u80FD\u4F18\u5316\u9879
- **\u63A8\u8350** \u4F7F\u7528**const**
- Array vs Collection vs Dictionary\u9009\u62E9\u65F6\uFF0C\u67E5\u8BE2\u4F7F\u7528Dic\uFF0C\u5DF2\u77E5\u957F\u5EA6\u4F7F\u7528array\u7B49\u3002
- \u274C**\u907F\u514D** **Throwing Exceptions** \u629B\u51FA\u548C\u6355\u6349\u5F02\u5E38\u662F\u975E\u5E38\u6602\u8D35\u7684\u64CD\u4F5C\uFF0C\u5E94\u8BE5\u5728\u63D0\u524D\u9884\u77E5\u53EF\u80FD\u6027\u7684\u65F6\u5019\u4F7F\u7528if\u6216\u8005\u7C7B\u4F3CTryParse\u7684\u65B9\u6CD5\u53BB\u907F\u514DTryCatch\u903B\u8F91\u5224\u65AD\u3002
- \u274C**\u907F\u514D** **Reflection** \u53CD\u5C04\u662F\u5F88\u8017\u65F6\u7684\u64CD\u4F5C\uFF0C\u5C3D\u91CF\u907F\u514D\u3002\u5C3D\u91CF\u4F7F\u7528\u57FA\u7C7B\u6216\u8005\u63A5\u53E3\u3002
- \u274C**\u907F\u514D**  The **dynamic** type is particularly expensive. Try avoiding it entirely in hot paths.
- **\u7981\u6B62** **Boxing**\u907F\u514D\u88C5\u7BB1\u62C6\u7BB1\u7684\u64CD\u4F5C\uFF0C\u6BD4\u5982\`HashTable\`\uFF0C\`ArrayList\`\uFF0C\u6216\u8005\u65B9\u6CD5\u63A5\u53E3\u4F7F\u7528**object**
- \u2714**\u8003\u8651** **Caching**\u6570\u636E\uFF0C\u9891\u7E41\u8BBF\u95EE\u6570\u636E\u6216\u8005\u64CD\u4F5C\u6BD4\u8F83\u8D39\u65F6\u7684\u6570\u636E\u7ED3\u679C\uFF0C\u5E94\u8BE5\u8003\u8651\u4F7F\u7528\u7F13\u5B58\u6216\u8005\u6587\u4EF6\u6682\u5B58\u3002Cache\u4E5F\u4E0D\u80FD\u592A\u591A\uFF0C\u589E\u52A0\u5185\u5B58\u538B\u529B\u3002Cache\u4E5F\u6709\u53EF\u80FD\u4F1A\u5F15\u8D77\u5185\u5B58\u6CC4\u6F0F\uFF0C\u8BBE\u8BA1\u65F6\u5019\u8BF7\u8003\u8651\u3002Cache\u9A8C\u8BC1\u5931\u6548\u7684\u673A\u5236\u4E5F\u4E0D\u80FD\u6BD4\u4FE1\u606F\u83B7\u53D6\u6D88\u8017\u66F4\u5927\uFF0C\u9002\u5F97\u5176\u53CD\u3002

## Hot Path\u5173\u952E\u8BBF\u95EE\u8DEF\u5F84

Hot Path\u662F\u6307\u7A0B\u5E8F\u4E2D\u7ECF\u5E38\u88AB\u8C03\u7528\u7684\u65B9\u6CD5\uFF0C\u5173\u952E\u529F\u80FD\u7684\u7B97\u6CD5\uFF0C\u6BD4\u5982\u4EE5\u4E0B\u51E0\u7C7B\uFF1A
- **\u6570\u636E\u5E93**\u8BFB\u5199\uFF0C\u548C\u5B9E\u4F53\u6A21\u578B\u4E4B\u95F4**\u6620\u5C04**
- **\u6587\u4EF6**\u8BFB\u5199\u548C**\u5E8F\u5217\u5316**
- \u7F51\u7EDC\u6216\u8005\u786C\u4EF6**\u901A\u8BAF**
- **\u6D77\u91CF**\u6570\u636E\uFF08>100\uFF09\u8BA1\u7B97\uFF0C\u67E5\u8BE2\uFF0C\u6392\u5E8F\u7B49
- \u6846\u67B6**\u5E95\u5C42**\u673A\u5236
- **\u516C\u7528**\u63A7\u4EF6\u548C\u5E2E\u52A9\u7C7B

Hot Path\u4E2D\u7684\u65B9\u6CD5\u5B9E\u73B0\u5E94\u8BE5\u5C3D\u91CF\u8BBE\u8BA1\u5468\u5168\uFF0C\u8FDB\u884C\u5FC5\u8981\u7684**Benchmark**\u548C**Memory Diagnostic**\uFF08\u5185\u5B58\u8BCA\u65AD)\u3002
\u5728\u5173\u952E\u7684\u5730\u65B9\uFF0C\u9664\u4E86\u4E0A\u9762\u63D0\u5230\u7684Allocation(\u5185\u5B58\u5206\u914D)\uFF0CMemory Leak\uFF08\u5185\u5B58\u6CC4\u6F0F\uFF09\u7B49\uFF0C\u4E0B\u9762\u8FD9\u4E9B\u770B\u8D77\u6765\u6BD4\u8F83**\u6781\u7AEF**\u7684\u64CD\u4F5C\u4E5F\u662F\u5FC5\u987B\u8003\u8651\u7684\u3002

- \u2714**\u8003\u8651**\u8BBE\u8BA1\u66F4\u597D\u7684**\u67E5\u8BE2**\u65B9\u6CD5\uFF0CDictionary\u6216\u8005Binary Search\u6216\u8005Cache\u67E5\u8BE2\u7684Index\u7B49\u3002
- \u274C**\u907F\u514D** \u4F7F\u7528LINQ\uFF08ToArray\uFF0CToList\uFF0CMin\uFF0CWhere\u7B49\uFF09OrderBy\u548CDistinct\u8003\u8651\u4F7F\u7528\u4F7F\u7528SortedList\uFF0CHashSet\u7B49
- \u2714**\u8003\u8651** \u76F8\u6BD4List\u4F18\u5148\u4F7F\u7528**Array**\uFF0C\u76F8\u6BD4foreach\u4F18\u5148\u4F7F\u7528**for**
- \u274C**\u907F\u514D** \u5FAA\u73AF\u91CC\u9762\u5224\u65AD\uFF0C\u5148**\u5224\u65AD**\u518D\u5FAA\u73AF\u3002\u5FAA\u73AF\u4E2D\u6267\u884C\u4EE3\u7801\u6700\u7B80\u5316\uFF0C\u7F13\u5B58**Cache**\u4E34\u65F6\u53D8\u91CF\uFF0C\u800C\u4E0D\u662F\u5FAA\u73AF\u8C03\u7528\u65B9\u6CD5\u83B7\u53D6\u3002
- \u274C**\u907F\u514D** String\u7684\`Split\`\u3001\`SubString\`\u7B49\uFF0C\u4F7F\u7528**Span**\u7684Split\u548CSlide
- \u274C**\u907F\u514D** \u65B9\u6CD5\u53C2\u6570\u4F7F\u7528param\u65F6\u5019\uFF0C\u5E94\u8BE5\u5B9E\u73B0\u5E38\u7528\u4E2A\u6570\uFF08\u6BD4\u5982\u5355\u53C2\u6570\u548C\u53CC\u53C2\u6570\uFF09\u7684\u60C5\u51B5\uFF0C\u907F\u514D\u591A\u4F59List\u7684Allocation
- \u2714**\u8003\u8651** \u53C2\u6570\u6216\u8005\u53D8\u91CF\u4F7F\u7528\u5177\u4F53\u7684\u7C7B\uFF0C\u5982double[]\u3001List<double>\uFF0C\u800C\u4E0D\u662F\u63A5\u53E3Interface\u3002
\u63A5\u53E3\u8C03\u7528\u4F1A\u6709[\u591A\u4F59\u5F00\u9500](https://github.com/dotnet/runtime/issues/7291),\u8003\u8651\u5B9E\u73B0\u5E38\u7528\u5177\u7C7B\u7684\u65B9\u6CD5\uFF0C\u6216\u8005\u589E\u52A0\`is\`\u7684cast\u3002\u5982\uFF1A\`if(interface is double[] array){}\`
- \u2714**\u8003\u8651** \u4E2A\u522B\u60C5\u51B5\u4F7F\u7528[Struct\u6216\u8005ValueTuple](https://adamsitnik.com/Value-Types-vs-Reference-Types/)\u76F8\u6BD4\u4E8EClass\uFF0C\u6BD4\u5982\uFF0C\u5F53\u6570\u636E\u7ED3\u6784\u5C0F\u4E8E\u7B49\u4E8E16bytes\uFF084\u4E2Aint\uFF09\u5927\u5C0F\u7684\u65F6\u5019\uFF0Cstruct\u66F4\u52A0\u9AD8\u6548\u3002\u53C2\u8003wpf\u4E2D\u7684Color\u548CPoint\u3002
- \u2714**\u8003\u8651** \u590D\u6742Struct\u7ED3\u6784\u4F53\u5C3D\u91CF\u5B9A\u4E49\u4E3Areadonly\uFF0C\u4F20\u53C2\u65F6\u5019\u4F7F\u7528ref\uFF0C\u6216\u8005\u5B9A\u4E49\u4E3Areadonly ref\uFF0C\u51CF\u5C11\u6CA1\u5FC5\u8981\u7684\u5185\u5B58\u590D\u5236\u3002
- \u2714**\u8003\u8651** \u6781\u7AEF\u60C5\u51B5\u4E0B\uFF0C256bytes\u5927\u5C0F\u5185\u7684\u6570\u7EC4\u8003\u8651\u4F7F\u7528stackalloc\u3002\`Span<byte> bytes = stackalloc byte[2];\`

## \u53C2\u8003
- \u2B50\u5B98\u65B9dotnet https://docs.microsoft.com/en-us/dotnet/framework/performance/performance-tips
- \u2B50\u5B98\u65B9readonly struct https://docs.microsoft.com/en-us/dotnet/csharp/write-safe-efficient-code
- \u2B50 https://www.stevejgordon.co.uk/writing-high-performance-csharp-and-dotnet-code
- \u89C6\u9891\u6559\u7A0BWriting Allocation Free Code in C# https://www.bilibili.com/video/av39019704/
-  https://michaelscodingspot.com/performance-problems-in-csharp-dotnet/
-  https://michaelscodingspot.com/avoid-gc-pressure/
-  https://www.dotnetperls.com/optimization
-  https://github.com/adamsitnik/awesome-dot-net-performance `)])}const l=n(o,[["render",a],["__file","index.html.vue"]]);export{l as default};
