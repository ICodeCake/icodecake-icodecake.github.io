import{_ as a,o as e,c as s,e as t}from"./app.7b48ccfe.js";const r={},i=t('<h1 id="\u539F\u751F\u7C7B\u578B\u548C\u64CD\u4F5C\u6027\u80FD\u5BF9\u6BD4" tabindex="-1"><a class="header-anchor" href="#\u539F\u751F\u7C7B\u578B\u548C\u64CD\u4F5C\u6027\u80FD\u5BF9\u6BD4" aria-hidden="true">#</a> \u539F\u751F\u7C7B\u578B\u548C\u64CD\u4F5C\u6027\u80FD\u5BF9\u6BD4</h1><h2 id="array-vs-list" tabindex="-1"><a class="header-anchor" href="#array-vs-list" aria-hidden="true">#</a> array vs list</h2><p>Currently List makes an &quot;additional bounds check&quot; to the one array does. In other words when accessing List indexer or list iterator it must make sure the index given is less than list size. Plus, iterator checks &quot;version&quot;. That is relatively big overhead that makes accessing List much slower than array.</p><h2 id="string-vs-stringbuilder-vs-span" tabindex="-1"><a class="header-anchor" href="#string-vs-stringbuilder-vs-span" aria-hidden="true">#</a> string vs StringBuilder vs span</h2><h2 id="struct-vs-class" tabindex="-1"><a class="header-anchor" href="#struct-vs-class" aria-hidden="true">#</a> struct vs class</h2><h2 id="double-vs-float" tabindex="-1"><a class="header-anchor" href="#double-vs-float" aria-hidden="true">#</a> double vs float</h2><h2 id="if-vs-switch" tabindex="-1"><a class="header-anchor" href="#if-vs-switch" aria-hidden="true">#</a> if vs switch</h2><p>Notes, switch slower. It is tempting to think that a switch is always faster than an equivalent if-statement. However, this is not true. And: A situation where the switch is slower is when the actual runtime of the program has a very skewed distribution of inputs.</p><p>Benchmark So: If the input is almost always a specific value, then using an if-statement to test for that value may be faster.</p><h2 id="for-vs-foreach" tabindex="-1"><a class="header-anchor" href="#for-vs-foreach" aria-hidden="true">#</a> for vs foreach</h2><p>\u5BF9Array\u6765\u8BF4\uFF0Cfor\u548Cforeach\u6548\u7387\u4E00\u6837\uFF0C\u63A8\u8350\u4F7F\u7528foreach \u5BF9List\u6765\u8BF4\uFF0Cfor\u7684\u6548\u7387\u9AD8\u4E8Eforeach\uFF0C\u63A8\u8350\u4F7F\u7528for</p><h2 id="dictionary-vs-linq" tabindex="-1"><a class="header-anchor" href="#dictionary-vs-linq" aria-hidden="true">#</a> dictionary vs linq</h2><p>linq\u7684ToArray\u548CToList\u6548\u7387\u4E00\u6837\uFF0C\u4E3B\u8981\u533A\u522B\u5728\u4E8E\u540E\u671F\u4F7F\u7528</p><h2 id="sort-sortedlist-vs-sorteddictionary" tabindex="-1"><a class="header-anchor" href="#sort-sortedlist-vs-sorteddictionary" aria-hidden="true">#</a> sort SortedList vs SortedDictionary</h2><h2 id="buffer-blockcopy-vs-array-copy" tabindex="-1"><a class="header-anchor" href="#buffer-blockcopy-vs-array-copy" aria-hidden="true">#</a> Buffer.BlockCopy vs Array.Copy</h2>',15),h=[i];function o(n,d){return e(),s("div",null,h)}const l=a(r,[["render",o],["__file","Built-inTypesAndMethods.html.vue"]]);export{l as default};
